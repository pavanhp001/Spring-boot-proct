/* **************************************************************************
 *                                                            *
 * **************************************************************************
 * This code contains copyright information which is the proprietary property
 * of   Application Solutions. No part of this code may be reproduced,
 * stored or transmitted in any form without the prior written permission of
 *   Application Solutions.
 *
 * Copyright   Application Solutions 2008
 * All rights reserved.
 */
//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.1.2-b01-fcs
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2008.06.06 at 10:53:19 AM BST
//

package abc.xyz.pts.bcs.common.dto;

import java.beans.PropertyDescriptor;
import java.io.Serializable;
import java.lang.reflect.Field;
import java.math.BigInteger;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;

import org.apache.commons.beanutils.PropertyUtils;

import abc.xyz.pts.bcs.common.annotation.SensitiveProperty;

/**
 * <p>
 * Java class for AbstractQueryCommand complex type.
 *
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 *
 * <pre>
 * &lt;complexType name="AbstractQueryCommand">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;attribute name="sessionId" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="workingAirport" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="userType" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="totalRecordsRetrieved" type="{http://www.w3.org/2001/XMLSchema}integer" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 *
 *
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "AbstractQueryCommand", namespace = "CommonBeanDefinitionsSchema")
@XmlSeeAlso( { AbstractRequeryableCommand.class })
@Deprecated // not used since Qatar Interim
public class AbstractQueryCommand implements Serializable {

    /**
     * Copies all properties from the this bean to destination. Except those that are declared as sensitive in the src
     * bean's class.
     *
     * @param dest
     * @throws Exception
     */
    public final Object copyProperties(final Object dest) throws Exception {
        PropertyDescriptor[] properties = PropertyUtils.getPropertyDescriptors(this);
        Class srcClass = this.getClass();
        for (PropertyDescriptor propDescriptor : properties) {
            Field field = null;
            try {
                field = srcClass.getDeclaredField(propDescriptor.getName());
            } catch (NoSuchFieldException nsfe) {
                // field is inherited, we can't check for annotation
            }
            if ((field == null || !field.isAnnotationPresent(SensitiveProperty.class))
                    && !"class".equals(propDescriptor.getName()) && propDescriptor.getWriteMethod() != null) {

                try {
                    Object copiedValue = PropertyUtils.getProperty(this, propDescriptor.getName());
                    PropertyUtils.setProperty(dest, propDescriptor.getName(), copiedValue);
                } catch (NoSuchMethodException nsme) {
                    // ignore hidden methods
                }
            }
        }

        return dest;
    }

    @XmlAttribute
    protected String sessionId;
    @XmlAttribute
    protected String workingAirport;
    @XmlAttribute
    protected String userType;
    @XmlAttribute
    protected BigInteger totalRecordsRetrieved;
    private String emailAddress;

    /**
     * Gets the value of the sessionId property.
     *
     * @return possible object is {@link String }
     *
     */
    public String getSessionId() {
        return sessionId;
    }

    /**
     * Sets the value of the sessionId property.
     *
     * @param value
     *            allowed object is {@link String }
     *
     */
    public void setSessionId(final String value) {
        this.sessionId = value;
    }

    /**
     * Gets the value of the workingAirport property.
     *
     * @return possible object is {@link String }
     *
     */
    public String getWorkingAirport() {
        return workingAirport;
    }

    /**
     * Sets the value of the workingAirport property.
     *
     * @param value
     *            allowed object is {@link String }
     *
     */
    public void setWorkingAirport(final String value) {
        this.workingAirport = value;
    }

    /**
     * Gets the value of the userType property.
     *
     * @return possible object is {@link String }
     *
     */
    public String getUserType() {
        return userType;
    }

    /**
     * Sets the value of the userType property.
     *
     * @param value
     *            allowed object is {@link String }
     *
     */
    public void setUserType(final String value) {
        this.userType = value;
    }

    /**
     * Gets the value of the totalRecordsRetrieved property.
     *
     * @return possible object is {@link BigInteger }
     *
     */
    public BigInteger getTotalRecordsRetrieved() {
        return totalRecordsRetrieved;
    }

    /**
     * Sets the value of the totalRecordsRetrieved property.
     *
     * @param value
     *            allowed object is {@link BigInteger }
     *
     */
    public void setTotalRecordsRetrieved(final BigInteger value) {
        this.totalRecordsRetrieved = value;
    }

    public String getEmailAddress() {
        return emailAddress;
    }

    public void setEmailAddress(final String emailAddress) {
        this.emailAddress = emailAddress;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((emailAddress == null) ? 0 : emailAddress.hashCode());
        result = prime * result + ((sessionId == null) ? 0 : sessionId.hashCode());
        result = prime * result + ((totalRecordsRetrieved == null) ? 0 : totalRecordsRetrieved.hashCode());
        result = prime * result + ((userType == null) ? 0 : userType.hashCode());
        result = prime * result + ((workingAirport == null) ? 0 : workingAirport.hashCode());
        return result;
    }

    @Override
    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final AbstractQueryCommand other = (AbstractQueryCommand) obj;
        if (emailAddress == null) {
            if (other.emailAddress != null) {
                return false;
            }
        } else if (!emailAddress.equals(other.emailAddress)) {
            return false;
        }
        if (sessionId == null) {
            if (other.sessionId != null) {
                return false;
            }
        } else if (!sessionId.equals(other.sessionId)) {
            return false;
        }
        if (totalRecordsRetrieved == null) {
            if (other.totalRecordsRetrieved != null) {
                return false;
            }
        } else if (!totalRecordsRetrieved.equals(other.totalRecordsRetrieved)) {
            return false;
        }
        if (userType == null) {
            if (other.userType != null) {
                return false;
            }
        } else if (!userType.equals(other.userType)) {
            return false;
        }
        if (workingAirport == null) {
            if (other.workingAirport != null) {
                return false;
            }
        } else if (!workingAirport.equals(other.workingAirport)) {
            return false;
        }
        return true;
    }
}
