/* This code contains copyright information which is the proprietary property
 * of   Advanced Travel Solutions. No part of this code may be reproduced,
 * stored or transmitted in any form without the prior written permission of
 *   Advanced Travel Solutions.
 *
 * Copyright   Advanced Travel Solutions 2011
 * Confidential. All rights reserved.
 */

// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.1-b02-fcs
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2009.03.26 at 04:27:53 PM GMT
//

package abc.xyz.pts.bcs.wi.dto;

import java.io.Serializable;
import java.util.Calendar;
import java.util.Comparator;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;

import org.apache.commons.lang.StringUtils;
import org.w3._2001.xmlschema.Adapter1;

import abc.xyz.pts.bcs.common.enums.SortOrderType;
import abc.xyz.pts.bcs.common.enums.TargetRequestType;
import abc.xyz.pts.bcs.common.irisk.enums.AlertMatchTypes;
import abc.xyz.pts.bcs.common.util.CalendarUtils;

/**
 * <p>
 * Java class for TARGET_ITEM complex type.
 */
@SuppressWarnings("serial")
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "TARGET_ITEM", namespace = "TARGET_ITEM")
public class TargetItem implements Comparable<TargetItem>, Serializable {
    @XmlAttribute(name = "TARGET_WL_ID")
    private Long targetWlId;
    @XmlAttribute(name = "ID")
    private Long id;
    @XmlAttribute(name = "FORENAME")
    private String forename;
    @XmlAttribute(name = "LAST_NAME")
    private String lastName;
    @XmlAttribute(name = "DOC_TYPE")
    private String docType;
    @XmlAttribute(name = "DOC_NO")
    private String docNo;
    @XmlAttribute(name = "NATIONALITY")
    private String nationality;
    @XmlAttribute(name = "BIRTH_DATE")
    @XmlJavaTypeAdapter(Adapter1.class)
    @XmlSchemaType(name = "dateTime")
    private Calendar birthDate;
    @XmlAttribute(name = "BIRTH_DATE_FROM")
    @XmlJavaTypeAdapter(Adapter1.class)
    @XmlSchemaType(name = "dateTimeFrom")
    private Calendar birthDateFrom;
    @XmlAttribute(name = "BIRTH_DATE_TO")
    @XmlJavaTypeAdapter(Adapter1.class)
    @XmlSchemaType(name = "dateTime")
    private Calendar birthDateTo;
    @XmlAttribute(name = "BIRTH_PLACE")
    private String birthPlace;
    @XmlAttribute(name = "GENDER")
    private String gender;
    @XmlAttribute(name = "VALID_UNTIL_DATE")
    @XmlJavaTypeAdapter(Adapter1.class)
    @XmlSchemaType(name = "dateTime")
    private Calendar validUntilDate;
    @Deprecated // replaced by actc_code
    @XmlAttribute(name = "RECOMMENDED_ACTION")
    private String recommendedAction;
    @XmlAttribute(name = "UPDATE_VERSION_NO")
    private Long updateVersionNo;
    @XmlAttribute(name = "QUERY_COUNT")
    private Long queryCount;
    @XmlAttribute(name = "PROTOCOL_NUMBER")
    private String protocolNumber;
    @XmlAttribute(name = "MATCH_SCORE")
    private Double matchScore;
    @XmlAttribute(name = "DATE_OF_LAST_CHANGE")
    @XmlJavaTypeAdapter(Adapter1.class)
    @XmlSchemaType(name = "dateTime")
    private Calendar dateOfLastChange;
    @XmlAttribute(name = "MATCH_TYPE")
    private AlertMatchTypes matchType;
    @XmlAttribute(name = "COUNTRY_OF_BIRTH")
    private String countryOfBirth;
    @XmlAttribute(name = "WATL_NAME")
    private String watlName;
    @XmlAttribute(name = "WATL_DESC")
    private String watlDesc;
    @XmlAttribute(name = "RESC_CODE")    // reason code
    private String rescCode;
    @XmlAttribute(name = "RESC_CODE_DESC")   // reason code
    private String rescCodeDesc;
    @XmlAttribute(name = "ACTC_CODE")
    private String actcCode;
    @XmlAttribute(name = "ACTC_CODE_DESC")
    private String actcCodeDesc;
    @XmlAttribute(name = "SEVERITY_LEVEL")
    private Long severityLevel;
    @XmlAttribute(name = "CREATED_BY")
    private String createdBy;
    @XmlAttribute(name = "DocumentIssueCountry")
    private String documentIssueCountry;
    @XmlAttribute(name = "APP_ACTION_CODE")
    private String appActionCode;
    @XmlAttribute(name = "ENABLED_INDICATOR")
    private Boolean enabledIndicator;
    @XmlAttribute(name = "CLEARED_DOCUMENTS_ID")
    private Long clearedDocumentsId;
    @XmlAttribute(name = "AUTO_QUALIFY")
    private String autoQualify;
    /** <code>messageIndicator</code> is to indicate, whether the
     * target item is obtained from the message. This indicator will
     * be used in target matching. */
    @XmlAttribute(name = "MESSAGE_INDICATOR")
    protected boolean messageIndicator;
    /** Uploaded File Reference Number */
    @XmlAttribute(name = "FILE_REFERENCE_NUMBER")
    protected String fileReferenceNumber;
    @XmlTransient
    private TargetRequestType targetRequestType ;
    /**
     * Status of the Target Item.
     * <p/>
     * The applicable status are as follows:
     * <table border="2">
     * <thead>
     * <tr><th>Status</th><th>Description</th></tr>
     * <thead>
     * <tbody>
     * <tr>
     * <td>A</td><td>Active</td>
     * </tr>
     * <tr>
     * <td>R</td><td>Ready</td>
     * </tr>
     * <tr>
     * <td>I</td><td>In-Progress</td>
     * </tr>
     * <tr>
     * <td>E</td><td>Error</td>
     * </tr>
     * </tbody>
     * </table>
     **/
    @XmlAttribute(name = "STATUS")
    protected String targetStatus;

    @XmlAttribute(name="REMARKS")
    protected String remarks;

    /**
     * @return the fileReferenceNumber
     */
    public String getFileReferenceNumber() {
        return fileReferenceNumber;
    }

    /**
     * @param fileReferenceNumber the fileReferenceNumber to set
     */
    public void setFileReferenceNumber(final String fileReferenceNumber) {
        this.fileReferenceNumber = fileReferenceNumber;
    }

    /**
     * @return the targetStatus
     */
    public String getTargetStatus() {
        return targetStatus;
    }

    /**
     * @param targetStatus the targetStatus to set
     */
    public void setTargetStatus(final String targetStatus) {
        this.targetStatus = targetStatus;
    }

    /**
     * @param targetStatus the targetStatus to set
     */
    public void setStatus(final String targetStatus) {
        this.targetStatus = targetStatus;
    }

    public boolean isMessageIndicator() {
        return messageIndicator;
    }

    public void setMessageIndicator(final boolean messageIndicator) {
        this.messageIndicator = messageIndicator;
    }

    public Long getClearedDocumentsId() {
        return clearedDocumentsId;
    }

    public void setClearedDocumentsId(final Long clearedDocumentsId) {
        this.clearedDocumentsId = clearedDocumentsId;
    }

    public String getAppActionCode() {
        return appActionCode;
    }

    public void setAppActionCode(final String appActionCode) {
        this.appActionCode = appActionCode;
    }

    public TargetItem() {
        this.matchScore = 100.0d;  // data from DB will be exact match
        this.matchType = AlertMatchTypes.PERSON_MATCH; //default for the score
        this.targetStatus = "A"; //Default Target Status
        this.targetRequestType = TargetRequestType.TO_MATCH;  // Default value of the TargetRequestType
    }

    public String getWatlDesc() {
        return watlDesc;
    }

    public void setWatlDesc(final String watlDesc) {
        this.watlDesc = watlDesc;
    }

    public Long getSeverityLevel() {
        return severityLevel;
    }

    public void setSeverityLevel(final Long severityLevel) {
        this.severityLevel = severityLevel;
    }

    public String getWatlName() {
        return watlName;
    }

    public void setWatlName(final String watlName) {
        this.watlName = watlName;
    }

    public String getRescCode() {
        return rescCode;
    }

    public void setRescCode(final String rescCode) {
        this.rescCode = rescCode;
    }

    public String getActcCode() {
        return actcCode;
    }

    public void setActcCode(final String actcCode) {
        this.actcCode = actcCode;
    }

    /**
     * Gets the value of the targetWlId property.
     *
     * @return possible object is {@link Long }
     *
     */
    public Long getTargetWlId() {
        return targetWlId;
    }

    /**
     * Sets the value of the targetWlId property.
     *
     * @param value
     *            allowed object is {@link Long }
     *
     */
    public void setTargetWlId(final Long value) {
        this.targetWlId = value;
    }

    /**
     * Gets the value of the id property.
     *
     * @return possible object is {@link Long }
     *
     */
    public Long getId() {
        return id;
    }

    /**
     * Sets the value of the id property.
     *
     * @param value
     *            allowed object is {@link Long }
     *
     */
    public void setId(final Long value) {
        this.id = value;
    }

    /**
     * Gets the value of the forename property.
     *
     * @return possible object is {@link String }
     *
     */
    public String getForename() {
        return forename;
    }

    /**
     * Sets the value of the forename property.
     *
     * @param value
     *            allowed object is {@link String }
     *
     */
    public void setForename(final String value) {
        this.forename = value;
    }

    /**
     * Gets the value of the lastName property.
     *
     * @return possible object is {@link String }
     *
     */
    public String getLastName() {
        return lastName;
    }

    /**
     * Sets the value of the lastName property.
     *
     * @param value
     *            allowed object is {@link String }
     *
     */
    public void setLastName(final String value) {
        this.lastName = value;
    }

    /**
     * Gets the value of the docType property.
     *
     * @return possible object is {@link String }
     *
     */
    public String getDocType() {
        return docType;
    }

    /**
     * Sets the value of the docType property.
     *
     * @param value
     *            allowed object is {@link String }
     *
     */
    public void setDocType(final String value) {
        this.docType = value;
    }

    /**
     * Gets the value of the docNo property.
     *
     * @return possible object is {@link String }
     *
     */
    public String getDocNo() {
        return docNo;
    }

    /**
     * Sets the value of the docNo property.
     *
     * @param value
     *            allowed object is {@link String }
     *
     */
    public void setDocNo(final String value) {
        this.docNo = value;
    }

    /**
     * Gets the value of the nationality property.
     *
     * @return possible object is {@link String }
     *
     */
    public String getNationality() {
        return nationality;
    }

    /**
     * Sets the value of the nationality property.
     *
     * @param value
     *            allowed object is {@link String }
     *
     */
    public void setNationality(final String value) {
        this.nationality = value;
    }

    /**
     * Gets the value of the birthDate property.
     *
     * @return possible object is {@link String }
     *
     */
    public Calendar getBirthDate() {
        return birthDate;
    }

    /**
     * Sets the value of the birthDate property.
     *
     * @param value
     *            allowed object is {@link String }
     *
     */
    public void setBirthDate(final Calendar value) {
        this.birthDate = value;
    }

    /**
     * Gets the value of the birthPlace property.
     *
     * @return possible object is {@link String }
     *
     */
    public String getBirthPlace() {
        return birthPlace;
    }

    /**
     * Sets the value of the birthPlace property.
     *
     * @param value
     *            allowed object is {@link String }
     *
     */
    public void setBirthPlace(final String value) {
        this.birthPlace = value;
    }

    /**
     * Gets the value of the gender property.
     *
     * @return possible object is {@link String }
     *
     */
    public String getGender() {
        return gender;
    }

    /**
     * Sets the value of the gender property.
     *
     * @param value
     *            allowed object is {@link String }
     *
     */
    public void setGender(final String value) {
        this.gender = value;
    }

    /**
     * Gets the value of the validUntilDate property.
     *
     * @return possible object is {@link String }
     *
     */
    public Calendar getValidUntilDate() {
        return validUntilDate;
    }

    /**
     * Sets the value of the validUntilDate property.
     *
     * @param value
     *            allowed object is {@link String }
     *
     */
    public void setValidUntilDate(final Calendar value) {
        this.validUntilDate = value;
    }

    /**
     * Gets the value of the recommendedAction property.
     *
     * @return possible object is {@link String }
     *
     */
    public String getRecommendedAction() {
        return recommendedAction;
    }

    /**
     * Sets the value of the recommendedAction property.
     *
     * @param value
     *            allowed object is {@link String }
     *
     */
    public void setRecommendedAction(final String value) {
        this.recommendedAction = value;
    }

    /**
     * Gets the value of the updateVersionNo property.
     *
     * @return possible object is {@link Long }
     *
     */
    public Long getUpdateVersionNo() {
        return updateVersionNo;
    }

    /**
     * Sets the value of the updateVersionNo property.
     *
     * @param value
     *            allowed object is {@link Long }
     *
     */
    public void setUpdateVersionNo(final Long value) {
        this.updateVersionNo = value;
    }

    /**
     * Gets the value of the queryCount property.
     *
     * @return possible object is {@link Long }
     *
     */
    public Long getQueryCount() {
        return queryCount;
    }

    /**
     * Sets the value of the queryCount property.
     *
     * @param value
     *            allowed object is {@link Long }
     *
     */
    public void setQueryCount(final Long value) {
        this.queryCount = value;
    }

    /**
     * Gets the value of the protocolNumber property.
     *
     * @return possible object is {@link String }
     *
     */
    public String getProtocolNumber() {
        return protocolNumber;
    }

    /**
     * Sets the value of the protocolNumber property.
     *
     * @param value
     *            allowed object is {@link String }
     *
     */
    public void setProtocolNumber(final String value) {
        this.protocolNumber = value;
    }

    /**
     * Gets the value of the matchScore property.
     *
     * @return possible object is {@link Double }
     *
     */
    public Double getMatchScore() {
        return matchScore;
    }

    /**
     * Sets the value of the matchScore property.
     *
     * @param value
     *            allowed object is {@link Double }
     *
     */
    public void setMatchScore(final Double value) {
        this.matchScore = value;
    }

    /**
     * Gets the value of the dateOfLastChange property.
     *
     * @return possible object is {@link String }
     *
     */
    public Calendar getDateOfLastChange() {
        return dateOfLastChange;
    }

    /**
     * Sets the value of the dateOfLastChange property.
     *
     * @param value
     *            allowed object is {@link String }
     *
     */
    public void setDateOfLastChange(final Calendar value) {
        this.dateOfLastChange = value;
    }

    /**
     * Gets the value of the matchType property.
     *
     * @return possible object is {@link String }
     *
     */
    public AlertMatchTypes getMatchType() {
        return matchType;
    }

    /**
     * Sets the value of the matchType property.
     *
     * @param value
     *            allowed object is {@link String }
     *
     */
    public void setMatchType(final AlertMatchTypes value) {
        this.matchType = value;
    }

    public String getCountryOfBirth() {
        return countryOfBirth;
    }

    public void setCountryOfBirth(final String countryOfBirth) {
        this.countryOfBirth = countryOfBirth;
    }

    /**
     * Gets the identity of the user who created the Target Item.
     *
     * @return String containing the creator of the Target Item
     */
    public String getCreateBy(){
        return createdBy;
    }

    /**
     * Sets the identity of the user who created the Target Item
     *
     * @param createUser
     */
    public void setCreatedBy(final String createBy) {
        this.createdBy = createBy;
    }

    public String getActcCodeDesc() {
        return actcCodeDesc;
    }

    public void setActcCodeDesc(final String actcCodeDesc) {
        this.actcCodeDesc = actcCodeDesc;
    }

    public String getRescCodeDesc() {
        return rescCodeDesc;
    }

    public void setRescCodeDesc(final String rescCodeDesc) {
        this.rescCodeDesc = rescCodeDesc;
    }

    public Calendar getBirthDateTo() {
        return birthDateTo;
    }

    public void setBirthDateTo(final Calendar birthDateTo) {
        this.birthDateTo = birthDateTo;
    }

    public Calendar getBirthDateFrom() {
        return birthDateFrom;
    }

    public void setBirthDateFrom(final Calendar birthDateFrom) {
        this.birthDateFrom = birthDateFrom;
    }
    /**
     * Gets the value of the documentIssueCountry property.
     *
     * @return
     *     possible object is
     *     {@link String }
     *
     */
    public String getDocumentIssueCountry() {
        return documentIssueCountry;
    }

    /**
     * Sets the value of the documentIssueCountry property.
     *
     * @param value
     *     allowed object is
     *     {@link String }
     *
     */
    public void setDocumentIssueCountry(final String value) {
        this.documentIssueCountry = value;
    }

    /**
     *
     * @return Boolean - value of WATCHLIST Enabled indicator
     */

    public Boolean getEnabledIndicator() {
        return enabledIndicator;
    }

    /**
     *
     * Set the value of the WATCHLIST Enabled indicator
     * @param enabledIndicator
     */
    public void setEnabledIndicator(final Boolean enabledIndicator) {
        this.enabledIndicator = enabledIndicator;
    }


    public String getAutoQualify() {
        return autoQualify;
    }

    public void setAutoQualify(final String autoQualify) {
        this.autoQualify = autoQualify;
    }

    /**
     * @return the remarks
     */
    public String getRemarks() {
        return remarks;
    }

    /**
     * @param remarks the remarks to set
     */
    public void setRemarks(final String remarks) {
        this.remarks = remarks;
    }

    public TargetRequestType getTargetRequestType() {
		return targetRequestType;
	}

	public void setTargetRequestType(final TargetRequestType targetRequestType) {
		this.targetRequestType = targetRequestType;
	}

    /**
     * Compare the receiving object with the specified object and returns
     * a negative integer, 0, or a positive integer depending on whether
     * the receiving object is less than, equal to, or greater than the
     * specified object
     *
     * @param targetItem
     *                 the object to be compared
     * @return int
     */
    @Override
    public int compareTo(final TargetItem targetItem) {
        return sortLastFirstName(targetItem);
    }


    /**
     * Sort the TargetItem in the list based on last name. If the last name is
     * the same then do an extra sort based on the first name
     *
     * @param targetItem
     *                 the item to be sorted against this item
     * @return a negative integer, zero, or a positive integer as the
     *            first argument is less than, equal to, or greater than the
     *           second.
     */
    private int sortLastFirstName(final TargetItem targetItem) {

        int lastCmp = lastName.compareTo(targetItem.lastName);
        int rtnValue = (lastCmp != 0 ? lastCmp : forename.compareTo(targetItem.forename));
        return rtnValue;
    }


    /**
     * Compare two strings. Returns a negative integer, zero, or a positive
     * integer as the first argument is less than, equal to, or greater than
     * the second
     * @param string1
     * @param string2
     * @return a negative integer, zero, or a positive integer as the
     *            first argument is less than, equal to, or greater than the
     *           second.
     */
    private int stringCompare(final String s1, final String s2) {

        // Replace a null value with an empty string to allow comparison

        String str1 = StringUtils.defaultString(s1);
        String str2 = StringUtils.defaultString(s2);

        return str1.compareTo(str2);
    }


    /**
     * Compare two dates of type Calendar. Returns a negative integer, zero,
     * or a positive integer as the first argument is less than, equal to, or
     * greater than the second

     * @param calendar1
     * @param calendar2
     * @return a negative integer, zero, or a positive integer as the
     *            first argument is less than, equal to, or greater than the
     *           second.
     */
    private int sortCalendarDate(final Calendar calendar1, final Calendar calendar2) {

        /*
         *  Replace a null value with an instance of the calendar class to
         *  allow comparison
         */
        Calendar cal1 = (calendar1 == null ? Calendar.getInstance() : calendar1);
        Calendar cal2 = (calendar2 == null ? Calendar.getInstance() : calendar2);

        return cal1.compareTo(cal2);
    }

    // ** Sort by LastName, FirstName
    // ********************************
    public static class LastFirsNameComparator implements Comparator<TargetItem>, Serializable {
        private static final long serialVersionUID = -3315849593927079005L;
        private SortOrderType sortOrder;

        public LastFirsNameComparator(final SortOrderType order) {
            this.sortOrder = order;
        }

        @Override
        public int compare(final TargetItem o1, final TargetItem o2) {
            String o1name = StringUtils.defaultString(o1.getLastName()) + " " + StringUtils.defaultString(o1.getForename());
            String o2name = StringUtils.defaultString(o2.getLastName()) + " " + StringUtils.defaultString(o2.getForename());
            int compareVal = o1name.compareTo(o2name);

            if (sortOrder == SortOrderType.DESCENDING) {
                compareVal *= -1;
            }

            return compareVal;
        }
    }


    // ** Sort by Watch List name
    // ********************************
    public static class WatlNameComparator implements Comparator<TargetItem>, Serializable {
        private static final long serialVersionUID = 6822011173175898094L;
        private SortOrderType sortOrder;

        public WatlNameComparator(final SortOrderType order) {
            this.sortOrder = order;
        }

        @Override
        public int compare(final TargetItem o1, final TargetItem o2) {
            int compareVal = o1.stringCompare(o1.getWatlName(), o2.getWatlName());

            if (sortOrder == SortOrderType.DESCENDING) {
                compareVal *= -1;
            }

            return compareVal;
        }
    }

    // ** Sort by Watch List Desc
    // ********************************
    public static class WatlDescComparator implements Comparator<TargetItem>, Serializable {
        private static final long serialVersionUID = 916100057668818797L;
        private SortOrderType sortOrder;

        public WatlDescComparator(final SortOrderType order) {
            this.sortOrder = order;
        }

        @Override
        public int compare(final TargetItem o1, final TargetItem o2) {
            int compareVal = o1.stringCompare(o1.getWatlDesc(), o2.getWatlDesc());

            if (sortOrder == SortOrderType.DESCENDING) {
                compareVal *= -1;
            }

            return compareVal;
        }
    }

    // ** Sort by Gender
    // ********************
    public static class GenderComparator implements Comparator<TargetItem>, Serializable {
        private static final long serialVersionUID = 6975276171901552791L;
        private SortOrderType sortOrder;

        public GenderComparator(final SortOrderType order) {
            this.sortOrder = order;
        }

        @Override
        public int compare(final TargetItem o1, final TargetItem o2) {
            int compareVal = o1.stringCompare(o1.getGender(), o2.getGender());

            if (sortOrder == SortOrderType.DESCENDING) {
                compareVal *= -1;
            }

            return compareVal;
        }
    }

    // ** Sort by Place Of Birth
    // ******************************
    public static class BirthPlaceComparator implements Comparator<TargetItem>, Serializable {
        private static final long serialVersionUID = 5660406865902284883L;
        private SortOrderType sortOrder;

        public BirthPlaceComparator(final SortOrderType order) {
            this.sortOrder = order;
        }

        @Override
        public int compare(final TargetItem o1, final TargetItem o2) {
            int compareVal = o1.stringCompare(o1.getBirthPlace(), o2.getBirthPlace());

            if (sortOrder == SortOrderType.DESCENDING) {
                compareVal *= -1;
            }

            return compareVal;
        }
    }

    // ** Sort by Country Of Birth
    // ********************************
    public static class CountryOfBirthComparator implements Comparator<TargetItem>, Serializable {
        private static final long serialVersionUID = 14786231506587L;
        private SortOrderType sortOrder;

        public CountryOfBirthComparator(final SortOrderType order) {
            this.sortOrder = order;
        }

        @Override
        public int compare(final TargetItem o1, final TargetItem o2) {
            int compareVal = o1.stringCompare(o1.getCountryOfBirth(), o2.getCountryOfBirth());

            if (sortOrder == SortOrderType.DESCENDING) {
                compareVal *= -1;
            }

            return compareVal;
        }
    }

    // ** Sort by BirthDate
    // ***********************
    public static class BirthDateComparator implements Comparator<TargetItem>, Serializable {
        private static final long serialVersionUID = -1774707288607719101L;
        private SortOrderType sortOrder;

        public BirthDateComparator(final SortOrderType order) {
            this.sortOrder = order;
        }

        @Override
        public int compare(final TargetItem o1, final TargetItem o2) {
            // * sorting on twisted logic
            Calendar c1 = (o1.getBirthDate() == null ? o1.getBirthDateFrom() : o1.getBirthDate());
            Calendar c2 = (o2.getBirthDate() == null ? o2.getBirthDateFrom() : o2.getBirthDate());

            int compareVal = o1.sortCalendarDate(c1, c2);

            if (sortOrder == SortOrderType.DESCENDING) {
                compareVal *= -1;
            }

            return compareVal;
        }
    }


    // ** Sort by Nationality
    // ***********************
    public static class NationalityComparator implements Comparator<TargetItem>, Serializable {
        private static final long serialVersionUID = -86301249288782744L;
        private SortOrderType sortOrder;

        public NationalityComparator(final SortOrderType order) {
            this.sortOrder = order;
        }

        @Override
        public int compare(final TargetItem o1, final TargetItem o2) {
            int compareVal = o1.stringCompare(o1.getNationality(), o2.getNationality());

            if (sortOrder == SortOrderType.DESCENDING) {
                compareVal *= -1;
            }

            return compareVal;
        }
    }

    // ** Sort by DocNo
    // ***********************
    public static class DocNoComparator implements Comparator<TargetItem>, Serializable {
        private static final long serialVersionUID = 4736833982910224767L;
        private SortOrderType sortOrder;

        public DocNoComparator(final SortOrderType order) {
            this.sortOrder = order;
        }

        @Override
        public int compare(final TargetItem o1, final TargetItem o2) {
            int compareVal = o1.stringCompare(o1.getDocNo(), o2.getDocNo());

            if (sortOrder == SortOrderType.DESCENDING) {
                compareVal *= -1;
            }

            return compareVal;
        }
    }

    // ** Sort by ValidUntilDate
    // **************************
    public static class ValidUntilDateComparator implements Comparator<TargetItem>, Serializable {
        private static final long serialVersionUID = -2033910186581662302L;
        private SortOrderType sortOrder;

        public ValidUntilDateComparator(final SortOrderType order) {
            this.sortOrder = order;
        }

        @Override
        public int compare(final TargetItem o1, final TargetItem o2) {
            int compareVal = o1.sortCalendarDate(o1.getValidUntilDate(), o2.getValidUntilDate());

            if (sortOrder == SortOrderType.DESCENDING) {
                compareVal *= -1;
            }

            return compareVal;
        }
    }

    // ** Sort by ProtocolNumber
    // **************************
    public static class ProtocolNumberComparator implements Comparator<TargetItem>, Serializable {
        private static final long serialVersionUID = -462739776105314883L;
        private SortOrderType sortOrder;

        public ProtocolNumberComparator(final SortOrderType order) {
            this.sortOrder = order;
        }

        @Override
        public int compare(final TargetItem o1, final TargetItem o2) {
            int compareVal = o1.stringCompare(o1.getProtocolNumber(), o2.getProtocolNumber());

            if (sortOrder == SortOrderType.DESCENDING) {
                compareVal *= -1;
            }

            return compareVal;
        }
    }

    // ** Sort by CreatedBy
    // **************************
    public static class CreatedByComparator implements Comparator<TargetItem>, Serializable {
        private static final long serialVersionUID = -2400851519972648831L;
        private SortOrderType sortOrder;

        public CreatedByComparator(final SortOrderType order) {
            this.sortOrder = order;
        }

        @Override
        public int compare(final TargetItem o1, final TargetItem o2) {
            int compareVal = o1.stringCompare(o1.getCreateBy(), o2.getCreateBy());

            if (sortOrder == SortOrderType.DESCENDING) {
                compareVal *= -1;
            }

            return compareVal;
        }
    }


    // ** Sort by RescCode
    // **************************
    public static class RescCodeDescComparator implements Comparator<TargetItem>, Serializable {
        private static final long serialVersionUID = -6898205451292849678L;
        private SortOrderType sortOrder;

        public RescCodeDescComparator(final SortOrderType order) {
            this.sortOrder = order;
        }

        @Override
        public int compare(final TargetItem o1, final TargetItem o2) {
            int compareVal = o1.stringCompare(o1.getRescCodeDesc(), o2.getRescCodeDesc());

            if (sortOrder == SortOrderType.DESCENDING) {
                compareVal *= -1;
            }

            return compareVal;
        }
    }

    // ** Sort by SeverityCode
    // **************************
    public static class SeverityComparator implements Comparator<TargetItem>, Serializable {
        private static final long serialVersionUID = -2907609559150315231L;
        private SortOrderType sortOrder;

        public SeverityComparator(final SortOrderType order) {
            this.sortOrder = order;
        }

        @Override
        public int compare(final TargetItem o1, final TargetItem o2) {
            long o1Severity = o1.getSeverityLevel() == null ? 0 : o1.getSeverityLevel();
            long o2Severity = o2.getSeverityLevel() == null ? 0 : o2.getSeverityLevel();

            int compareVal = 0;
            if (o1Severity > o2Severity) {
                compareVal = 1;
            } else if (o1Severity < o2Severity) {
                compareVal = -1;
            }

            if (sortOrder == SortOrderType.DESCENDING) {
                compareVal *= -1;
            }

            return compareVal;
        }
    }


    // ** Sort by Recommended Action
    // **************************
    public static class ActcCodeDescComparator implements Comparator<TargetItem>, Serializable {
        private static final long serialVersionUID = 6619409453325888144L;
        private SortOrderType sortOrder;

        public ActcCodeDescComparator(final SortOrderType order) {
            this.sortOrder = order;
        }

        @Override
        public int compare(final TargetItem o1, final TargetItem o2) {
            int compareVal = o1.stringCompare(o1.getActcCodeDesc(), o2.getActcCodeDesc());

            if (sortOrder == SortOrderType.DESCENDING) {
                compareVal *= -1;
            }

            return compareVal;
        }
    }

    // ** Sort by MatchScore
    // **************************
    public static class MatchScoreComparator implements Comparator<TargetItem>, Serializable {
        private static final long serialVersionUID = -2769122086354562734L;
        private SortOrderType sortOrder;

        public MatchScoreComparator(final SortOrderType order) {
            this.sortOrder = order;
        }

        @Override
        public int compare(final TargetItem o1, final TargetItem o2) {
            double s1 = o1.getMatchScore();
            double s2 = o2.getMatchScore();

            int compareVal = 0;
            if (s1 > s2) {
                compareVal = 1;
            }

            if (s1 < s2) {
                compareVal = -1;
            }

            if (sortOrder == SortOrderType.DESCENDING) {
                compareVal *= -1;
            }

            return compareVal;
        }
    }

    // ** Sort by Id
    // **************************
    public static class IdComparator implements Comparator<TargetItem>, Serializable {
        private static final long serialVersionUID = -7539880227386214516L;
        private SortOrderType sortOrder;

        public IdComparator(final SortOrderType order) {
            this.sortOrder = order;
        }

        @Override
        public int compare(final TargetItem o1, final TargetItem o2) {
            int compareVal = o1.getId().compareTo(o2.getId());

            if (sortOrder == SortOrderType.DESCENDING) {
                compareVal *= -1;
            }

            return compareVal;
        }
    }

    /**
     * AlertMatchType comparator
     */
    public static class AlertMatchTypeComparator implements Comparator<TargetItem>, Serializable {
        private static final long serialVersionUID = -2995937233143900647L;
        private SortOrderType sortOrder;

        public AlertMatchTypeComparator(final SortOrderType order) {
            this.sortOrder = order;
        }

        @Override
        public int compare(final TargetItem o1, final TargetItem o2) {

            // Need to be careful here as we're checking the string values of
            // the AlertMatchType - if we have future types added to this enum,
            // they'll have to have a suitable string representation that can be
            // compared alphabetically, or we'll have to refactor them.
            int compareVal = o1.stringCompare(o1.getMatchType().getDbVal(),
                    o2.getMatchType().getDbVal());

            if (sortOrder == SortOrderType.DESCENDING) {
                compareVal *= -1;
            }

            return compareVal;
        }
    }

    // ** Sort by Target Status
    // ********************************
    public static class TargetStatusComparator implements Comparator<TargetItem>, Serializable {
        private SortOrderType sortOrder;

        public TargetStatusComparator(final SortOrderType order) {
            this.sortOrder = order;
        }

        @Override
        public int compare(final TargetItem o1, final TargetItem o2) {
            int compareVal = o1.stringCompare(
                    o1.getTargetStatus(), o2.getTargetStatus());

            if (sortOrder == SortOrderType.DESCENDING) {
                compareVal *= -1;
            }

            return compareVal;
        }
    }

    // ** Sort by File Reference
    // ********************************
    public static class FileReferenceComparator implements Comparator<TargetItem>, Serializable {
        private SortOrderType sortOrder;

        public FileReferenceComparator(final SortOrderType order) {
            this.sortOrder = order;
        }

        @Override
        public int compare(final TargetItem o1, final TargetItem o2) {
            String firstFileRef = o1.getFileReferenceNumber() == null ?
                    "" : o1.getFileReferenceNumber();
            String secondFileRef = o2.getFileReferenceNumber() == null ?
                    "" : o2.getFileReferenceNumber();

            int compareVal = o1.stringCompare(firstFileRef, secondFileRef);

            if (sortOrder == SortOrderType.DESCENDING) {
                compareVal *= -1;
            }

            return compareVal;
        }
    }

    @Override
    public String toString() {
        StringBuffer buf = new StringBuffer();
        buf.append("TargetItem=[ ");

        buf.append("id=").append(id).append(' ');
        buf.append("matchScore(").append(matchScore).append(") ");
        buf.append("matchType(").append(matchType).append(") ");
        buf.append("forename(").append(forename).append(") ");
        buf.append("lastName(").append(lastName).append(") ");
        buf.append("nationality(").append(nationality).append(") ");
        buf.append("birthDate(").append(CalendarUtils.calToString(birthDate)).append(") ");
        buf.append("birthDateFrom(").append(CalendarUtils.calToString(birthDateFrom)).append(") ");
        buf.append("birthDateTo(").append(CalendarUtils.calToString(birthDateTo)).append(") ");
        buf.append("gender(").append(gender).append(") ");
        buf.append("birthPlace(").append(birthPlace).append(") ");
        buf.append("docType(").append(docType).append(") ");
        buf.append("docNo(").append(docNo).append(") ");
        buf.append("countryOfBirth(").append(countryOfBirth).append(") ");
        buf.append("watlName(").append(watlName).append(") ");
        buf.append("rescCode(").append(rescCode).append(") ");
        buf.append("actcCode(").append(actcCode).append(") ");
        buf.append("documentIssueCountry(").append(documentIssueCountry).append(") ");
        buf.append("protocolNumber(").append(protocolNumber).append(") ");
        buf.append("validUntilDate(").append(CalendarUtils.calToString(validUntilDate)).append(") ");
        buf.append("severityLevel(").append(severityLevel).append(") ");
        buf.append("updateVersionNo(").append(updateVersionNo).append(") ");
        buf.append("appActionCode(").append(appActionCode).append(") ");
        buf.append(']');

        return buf.toString();
    }

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((docNo == null) ? 0 : docNo.hashCode());
		result = prime * result + ((docType == null) ? 0 : docType.hashCode());
		result = prime * result + ((forename == null) ? 0 : forename.hashCode());
		result = prime * result + ((gender == null) ? 0 : gender.hashCode());
		result = prime * result + ((lastName == null) ? 0 : lastName.hashCode());
		return result;
	}

	@Override
	public boolean equals(final Object obj) {
		if (this == obj){
			return true;
		}
		if (obj == null){
			return false;
		}
		if (getClass() != obj.getClass()){
			return false;
		}
		TargetItem other = (TargetItem) obj;
		if (docNo == null) {
			if (other.docNo != null){
				return false;
			}
		} else if (!docNo.equals(other.docNo)){
			return false;
		}
		if (docType == null) {
			if (other.docType != null){
				return false;
			}
		} else if (!docType.equals(other.docType)){
			return false;
		}
		if (forename == null) {
			if (other.forename != null){
				return false;
			}
		} else if (!forename.equals(other.forename)){
			return false;
		}
		if (gender == null) {
			if (other.gender != null) {
				return false;
			}
		} else if (!gender.equals(other.gender)){
			return false;
		}
		if (lastName == null) {
			if (other.lastName != null) {
				return false;
			}
		} else if (!lastName.equals(other.lastName)){
			return false;
		}
		return true;
	}
	
	
	    
}
