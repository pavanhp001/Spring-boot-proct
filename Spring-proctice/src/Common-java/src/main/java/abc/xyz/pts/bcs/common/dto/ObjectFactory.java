/* **************************************************************************
 *                                                            *
 * **************************************************************************
 * This code contains copyright information which is the proprietary property
 * of   Application Solutions. No part of this code may be reproduced,
 * stored or transmitted in any form without the prior written permission of
 *   Application Solutions.
 *
 * Copyright   Application Solutions 2008
 * All rights reserved.
 */
//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.1.2-b01-fcs
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2008.06.06 at 10:53:19 AM BST
//

package abc.xyz.pts.bcs.common.dto;

import javax.xml.bind.annotation.XmlRegistry;

/**
 * This object contains factory methods for each Java content interface and Java element interface generated in the
 * abc.xyz.pts.bcs.common.dto package.
 * <p>
 * An ObjectFactory allows you to programatically construct new instances of the Java representation for XML content.
 * The Java representation of XML content can consist of schema derived interfaces and classes representing the binding
 * of schema type definitions, element declarations and model groups. Factory methods for each of these are provided in
 * this class.
 *
 */
@XmlRegistry
public class ObjectFactory {

    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package:
     * abc.xyz.pts.bcs.common.dto
     *
     */
    public ObjectFactory() {
    }

    /**
     * Create an instance of {@link AbstractQueryCommand }
     *
     */
    public AbstractQueryCommand createAbstractQueryCommand() {
        return new AbstractQueryCommand();
    }

    /**
     * Create an instance of {@link AbstractRequeryableCommand }
     *
     */
    public AbstractRequeryableCommand createAbstractRequeryableCommand() {
        return new AbstractRequeryableCommand();
    }

}
